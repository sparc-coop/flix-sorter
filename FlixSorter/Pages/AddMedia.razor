@page "/add"
@using FlixSorter.Data
@using Newtonsoft.Json;
@inject APIService ApiService
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<EditForm Model="@search" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="name" @bind-Value="search.Term" />

    <button type="submit">Submit</button>
</EditForm>

@if (Results != null)
{
    foreach (var item in Results.Search)
    {
        <div class="search-item">
            <img src="@item.Poster" width="50" />
            <div>
                <p @onclick="@(()=>AddToList(@item))">@item.Title (@item.Year)</p>
                <select @bind="@item.Streaming">
                    <option>Select A Service</option>
                    <option value="Netflix">Netflix</option>
                    <option value="Hulu">Hulu</option>
                </select>
                @*<label>Netflix<input type="checkbox" @bind="@item.Netflix" /></label>
                    <label>Hulu<input type="checkbox" @bind="@item.Hulu" /></label>*@
            </div>
        </div>
    }
}

<Lists DisplayList="@List" />

<button @onclick="@(async ()=> await SaveToLocalStorage())">Save</button>


@code {
    public Item item { get; set; }
    public SearchResults Results { get; set; }
    public Search search = new Search();
    private EditContext editContext;
    public List List { get; set; } = new List();
    public MovieTV Selected { get; set; }

    protected async override Task OnInitializedAsync()
    {
        editContext = new EditContext(search);
        List.All = new List<MovieTV>();

        var startList = await localStorage.GetItemAsync<string>("List");
        var localList = JsonConvert.DeserializeObject<List<MovieTV>>(startList);

        if (localList != null)
        {
            List.All = localList;
        }
    }

    private async Task HandleSubmit()
    {
        var isValid = editContext.Validate();

        if (isValid)
        {
            var response = await ApiService.GetMediaByTitle(search.Term);
            Results = response;
        }
        else
        {
            Console.WriteLine("Error");
        }
    }

    public class Search
    {
        public string Term { get; set; }
    }

    private void AddToList(MovieTV clicked)
    {
        Selected = clicked;
        if (!List.All.Contains(Selected))
        {
            List.All.Add(Selected);
            StateHasChanged();
        }

    }

    private async Task SaveToLocalStorage()
    {

        string json = JsonConvert.SerializeObject(List.All);
        await localStorage.SetItemAsync("List", json);
    }
}